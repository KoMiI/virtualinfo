#!/usr/bin/python3

import sys
import json
import subprocess


class Vinfo():
    def list(self):
        result = {
            "status": "success",
            "data": [],
        }

        process = subprocess.Popen(["virsh", "list"], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        for vm in process.stdout.readlines()[2:-1]:
            vm = vm.decode().split()
            vmDescProcess = subprocess.Popen(["virsh", "desc", vm[1]], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
            vmDesc = vmDescProcess.stdout.readline().decode()
            result["data"].append({
                "name": vm[1],
                "status": vm[2],
                "desc": vmDesc
            })

        print(json.dumps(result))
        
    def remove(self, vmNames):
        result = {
            "status": "success",
            "data": {},
        }

        for vmName in vmNames:
            if vmName not in result["data"]:
                vmDestroyProcess = subprocess.Popen(["virsh", "destroy", vmName], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                returnCode = vmDestroyProcess.wait()
                if returnCode == 0:
                    vmDestroyProcess = subprocess.run("find /pgpro/test-envs/ -type f -name \"" + vmName + "*\" | xargs rm -f", stdin=subprocess.PIPE, stdout=subprocess.PIPE, shell=True)
                    result["data"][vmName] = "success"
                else:
                    result["data"][vmName] = "fail"


        print(json.dumps(result))
    
    def main(self, cmd):
        if len(cmd) == 0 or cmd[0] not in ("list", "remove"):
            print("wrong command")
        elif cmd[0] == "list":
            self.list()
        elif cmd[0] == "remove":
            self.remove(cmd[1:])


if __name__ == "__main__":
    cmd = sys.argv[1:]
    vinfo = Vinfo()
    vinfo.main(cmd)
